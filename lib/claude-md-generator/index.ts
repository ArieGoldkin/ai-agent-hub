/**
 * CLAUDE.md Generator - Main orchestrator
 * 
 * Coordinates the generation of intelligent CLAUDE.md documentation
 */

import { existsSync, readdirSync } from "fs";
import { writeFile } from "fs/promises";
import { AgentMetadata, ClaudeMdSection, GenerationStrategy, ExecutionMode } from "./types.js";
import { extractAgentMetadata, parseExistingClaudeMd } from "./parser.js";
import { generateAgentRegistry } from "./generators/registry.js";
import { generateContextFlow } from "./generators/context-flow.js";
import { generateCapabilitiesMatrix } from "./generators/capabilities.js";
import { generateInvocationExamples } from "./generators/examples.js";
import { generateSquadSections } from "./generators/squad-sections.js";
import { generateModeHeader } from "./generators/mode-header.js";
import { generateMcpSection, generateTipsSection } from "./generators/common-sections.js";
import { generateAutoDetectionSection } from "./generators/auto-detection.js";
import { generateContextAwarenessSection } from "./generators/context-awareness.js";

/**
 * Generate complete CLAUDE.md content
 */
export async function generateClaudeMd(
  agents: AgentMetadata[],
  existingSections: ClaudeMdSection[] = [],
  strategy: GenerationStrategy = 'create',
  mode: ExecutionMode = 'classic'
): Promise<string> {
  const sections: string[] = [];
  
  // Header with mode indication
  sections.push(...generateModeHeader(mode));
  
  // Auto-Agent Detection Mode - FIRST for emphasis
  sections.push(generateAutoDetectionSection());

  // Context Awareness - Critical for continuity
  sections.push(generateContextAwarenessSection());

  // Quick Start (preserve if exists, otherwise generate)
  const existingQuickStart = existingSections.find(s => s.title.includes('Quick Start'));
  if (existingQuickStart && strategy !== 'create') {
    sections.push(`## ${existingQuickStart.title}`);
    sections.push(existingQuickStart.content);
  } else {
    sections.push('## Quick Start\n');
    sections.push('- **Auto Mode (Default):** Just describe what you need naturally\n');
    sections.push('- **Explicit Mode:** Say "Use [Agent Name] to [task]" for direct control\n');
  }
  
  // Agent Registry (only if we have agents with metadata)
  if (agents.length > 0) {
    sections.push(generateAgentRegistry(agents));
  } else {
    sections.push('## Available Agents\n');
    sections.push('*Agents are installed but metadata is being generated.*\n');
  }
  
  // Context Flow (only if we have agents with metadata)
  if (agents.length > 0) {
    sections.push(generateContextFlow(agents));
    
    // Capabilities Matrix
    sections.push(generateCapabilitiesMatrix(agents));
    
    // Invocation Examples
    sections.push(generateInvocationExamples(agents));
  }
  
  // Squad-specific sections
  if (mode === 'squad') {
    sections.push(...generateSquadSections());
  }
  
  // MCP Servers section
  sections.push(...generateMcpSection(existingSections, strategy));
  
  // Tips section  
  sections.push(...generateTipsSection(existingSections, strategy));
  
  // Preserve custom sections
  if (strategy === 'merge' || strategy === 'update') {
    const customSections = existingSections.filter(s => s.isCustom);
    if (customSections.length > 0) {
      sections.push('## Custom Documentation\n');
      sections.push('*User-added content preserved below*\n');
      
      for (const custom of customSections) {
        sections.push(`### ${custom.title}`);
        sections.push(custom.content);
      }
    }
  }
  
  // Footer
  sections.push('---');
  sections.push('*Generated by AI Agent Hub - Your AI development team is ready!*');
  
  return sections.join('\n');
}

/**
 * Main function to create or update CLAUDE.md
 */
export async function createOrUpdateClaudeMd(
  agentsDir: string = ".claude/agents",
  outputPath: string = "CLAUDE.md",
  mode: string = 'classic'
): Promise<void> {
  console.log("📝 Generating CLAUDE.md with agent metadata...");
  
  // Determine strategy
  let strategy: GenerationStrategy = 'create';
  let existingSections: ClaudeMdSection[] = [];
  
  if (existsSync(outputPath)) {
    console.log("   Found existing CLAUDE.md, preserving custom content...");
    strategy = 'merge';
    existingSections = await parseExistingClaudeMd(outputPath);
  }
  
  // Extract agent metadata
  const agents = await extractAgentMetadata(agentsDir);
  
  // Check for agents without metadata
  const allAgentFiles = existsSync(agentsDir) 
    ? readdirSync(agentsDir).filter(f => f.endsWith('.md'))
    : [];
  
  const agentsWithoutMetadata = allAgentFiles.length - agents.length;
  
  if (agents.length === 0 && allAgentFiles.length === 0) {
    console.warn("⚠️  No agents found in", agentsDir);
    return;
  }
  
  if (agents.length > 0) {
    console.log(`   Found ${agents.length} agents with metadata`);
  }
  
  if (agentsWithoutMetadata > 0) {
    console.log(`   Found ${agentsWithoutMetadata} agent(s) without metadata (will be listed separately)`);
  }
  
  // Generate content with mode
  const content = await generateClaudeMd(agents, existingSections, strategy, mode as ExecutionMode);
  
  // Write file
  await writeFile(outputPath, content);
  
  if (strategy === 'create') {
    console.log("✅ Created CLAUDE.md with rich agent documentation");
  } else {
    console.log("✅ Updated CLAUDE.md while preserving custom content");
  }
}